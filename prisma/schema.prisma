generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = ""
}

model Channel {
  id String @id @default(cuid())

  name     String @unique
  email    String @unique
  password String
  streamKey String @unique @default(cuid()) @map("stream_key")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  videos         Video[]
  history        VideoView[]
  ratings        VideoRating[]
  commentRatings CommentRating[]
  comments       Comment[]

  subscribers Channel[] @relation("Subscriber")
  subscribed  Channel[] @relation("Subscriber")

  @@map("channels")
}

model Video {
  id String @id @default(cuid())

  type       VideoType
  attributes String

  title       String  @db.VarChar(100)
  description String? @db.VarChar(1000)

  views    VideoView[]
  ratings  VideoRating[]
  comments Comment[]

  ownerId String  @map("owner_id")
  owner   Channel @relation(references: [id], fields: [ownerId])

  uploadedAt DateTime @default(now()) @map("uploaded_at")

  @@map("videos")
}

enum VideoType {
  PUBLIC
  UNLISTED
  HIDDEN
}

model VideoRating {
  type VideoRatingType

  channelId String  @map("channel_id")
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  videoId String @map("video_id")
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([channelId, videoId], name: "id")
  @@map("video_ratings")
}

enum VideoRatingType {
  LIKE
  DISLIKE
}

model VideoView {
  id Int @default(autoincrement())

  channelId String?  @map("channel_id")
  channel   Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)

  videoId String @map("video_id")
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([id, videoId])
  @@map("video_views")
}

model Comment {
  id Int @id @default(autoincrement())

  content String

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  videoId String @map("video_id")
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  ownerId String  @map("owner_id")
  owner   Channel @relation(references: [id], fields: [ownerId], onDelete: Cascade)

  ratings CommentRating[]

  parentCommentId Int?
  parentComment   Comment?  @relation("CommentReply", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReply")

  @@map("comments")
}

model CommentRating {
  type CommentRatingType

  channelId String  @map("channel_id")
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  commentId Int     @map("comment_id")
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([channelId, commentId], name: "id")
  @@map("comment_ratings")
}

enum CommentRatingType {
  LIKE
  DISLIKE
}
